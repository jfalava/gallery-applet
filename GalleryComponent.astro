---
interface Props {
  localizedPerRating: string;
  localizedPerTag: string;
  localizedGalleryRating: string;
  localizedTagRating: string;
  localizedLoading: string;
  localizedNowViewing: string;
  localizedAllGalleries: string;
  localizedLoadingError: string;
  localizedZoom: string;
  localizedDismiss: string;
}

const {
  localizedPerRating,
  localizedPerTag,
  localizedGalleryRating,
  localizedLoading,
  localizedNowViewing,
  localizedAllGalleries,
  localizedLoadingError,
  localizedZoom,
  localizedDismiss,
} = Astro.props as Props;
---

<div
  id="cw-container"
  class="space-y-4 select-none"
  data-localized-now-viewing={localizedNowViewing}
  data-localized-all-galleries={localizedAllGalleries}
  data-localized-zoom={localizedZoom}
  data-localized-dismiss={localizedDismiss}
>
  <div>
    <div
      id="gallery-selectors-container"
      class="flex justify-center items-center gap-3"
    >
      <button
        class="glassbox p-3 regular rounded button-glassbox"
        id="button-galleries"
        aria-label="Show gallery filters"
        title={localizedPerRating}
      >
        <div class="dark:invert inline-block">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="dark:invert inline-block h-8 w-auto"
            viewBox="0 0 24 24"
            ><path
              fill="currentColor"
              d="M8.5 15H10V9H7v1.5h1.5zm4 0H15q.425 0 .713-.288T16 14v-4q0-.425-.288-.712T15 9h-2.5q-.425 0-.712.288T11.5 10v4q0 .425.288.713T12.5 15m.5-1v-1.5h1.5V14zm0-2.5V10h1.5v1.5zM5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h14q.825 0 1.413.588T21 5v14q0 .825-.587 1.413T19 21z"
            ></path></svg
          >
        </div>
        <span class="inline-block">{localizedPerRating}</span>
      </button>
      <button
        class="glassbox p-3 regular rounded button-glassbox"
        id="button-tags"
        aria-label="Show tag filters"
        title={localizedPerTag}
      >
        <div class="dark:invert inline-block">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="dark:invert inline-block h-8 w-auto"
            viewBox="0 -2.5 24 24"
            ><path
              fill="currentColor"
              d="m13.963 1.478l2.483 2.483a2 2 0 0 1 .498 2L15.71 9.99l-7.93 7.93L0 10.142l7.899-7.899l4.056-1.26a2 2 0 0 1 2.008.495m-3.71 6.19a1.5 1.5 0 1 0 2.121-2.122a1.5 1.5 0 0 0-2.121 2.121zm7.222 1.047q.813.032 1.178-.273a1.5 1.5 0 0 0 .185-2.113q-.164-.196-.527-.364a2 2 0 0 0-.538-1.848L16.05 2.395l2.269-.706a2 2 0 0 1 2.008.496l2.483 2.483a2 2 0 0 1 .498 2l-1.235 4.028l-7.93 7.931l-2.795-2.794l5.688-5.688z"
            ></path></svg
          >
        </div>
        <span class="inline-block">{localizedPerTag}</span>
      </button>
    </div>
    <div
      id="gallery-filters"
      class="sticky top-0 flex space-x-2 overflow-x-auto py-2 hidden justify-center items-center"
    >
      <span class="regular mobile-only:hidden">
        {localizedGalleryRating}:
      </span>
      <button
        class="glassbox p-2 regular rounded text-nowrap button-glassbox"
        id="button-gallery-rating-1"
        title="Rating 1"
      >
        <div class="dark:invert inline-block">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="dark:invert inline-block h-8 w-auto"
            viewBox="0 0 24 24"
          >
            <g
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            >
              <path
                d="M3 12a9 9 0 1 0 18 0a9 9 0 1 0-18 0m4 3V9m8.5 3h3M17 10.5v3"
              ></path>
              <path
                d="M10 10.5a1.5 1.5 0 0 1 3 0c0 .443-.313.989-.612 1.393L10 15h3"
              ></path>
            </g>
          </svg>
        </div>
        <span class="mobile-only:hidden"> Rating 1 </span>
      </button>
      <button
        class="glassbox p-2 regular rounded text-nowrap button-glassbox"
        id="button-gallery-rating-2"
        title="Rating 2"
      >
        <div class="dark:invert inline-block">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="dark:invert inline-block h-8 w-auto"
            viewBox="0 0 24 24"
          >
            <g
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            >
              <path d="M3 12a9 9 0 1 0 18 0a9 9 0 1 0-18 0"></path>
              <path d="M10 10.5a1.5 1.5 0 1 0 3 0a1.5 1.5 0 1 0-3 0"></path>
              <path
                d="M10 13.5a1.5 1.5 0 1 0 3 0a1.5 1.5 0 1 0-3 0M7 15V9m8.5 3h3M17 10.5v3"
              ></path>
            </g>
          </svg>
        </div>
        <span class="mobile-only:hidden"> Rating 2 </span>
      </button>
      <button
        class="glassbox p-2 regular rounded text-nowrap button-glassbox"
        id="button-gallery-rating-3"
        title="Rating 3"
      >
        <div class="dark:invert inline-block">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="dark:invert inline-block h-8 w-auto"
            viewBox="0 0 24 24"
          >
            <g
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
            >
              <path
                d="M3 12a9 9 0 1 0 18 0a9 9 0 1 0-18 0m10 3V9m2.5 3h3M17 10.5v3"
              ></path>
              <path
                d="M7 10.5a1.5 1.5 0 0 1 3 0c0 .443-.313.989-.612 1.393L7 15h3"
              ></path>
            </g>
          </svg>
        </div>
        <span class="mobile-only:hidden"> Rating 3 </span>
      </button>
      <button
        class="glassbox p-2 regular rounded text-nowrap button-glassbox"
        id="button-gallery-all"
        title={localizedAllGalleries}
      >
        <div class="dark:invert inline-block">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="dark:invert inline-block h-8 w-auto"
            viewBox="0 0 24 24"
            ><path
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 12a9 9 0 1 0 18 0a9 9 0 0 0-18 0m9-4v4m0 4h.01"></path></svg
          >
        </div>
        <span class="mobile-only:hidden">{localizedAllGalleries}</span>
      </button>
    </div>
  </div>

  <div
    id="tags-container"
    class="flex overflow-x-auto whitespace-nowrap scroll-smooth scroll-pl-4 scroll-pr-4 snap-x snap-mandatory space-x-2 py-2 hidden sticky top-0 z-20 justify-start glassbox p-2 rounded-lg mt-[1%]"
  >
    <div class="flex gap-2 px-4"></div>
  </div>

  <div id="loading-placeholder" class="flex justify-center py-4 hidden">
    <span class="regular">{localizedLoading}</span>
    <div class="dark:invert inline-block">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="dark:invert h-8 w-auto ml-3"
        viewBox="0 0 24 24"
        ><circle cx="4" cy="12" r="3" fill="currentColor"
          ><animate
            id="svgSpinners3DotsScale0"
            attributeName="r"
            begin="0;svgSpinners3DotsScale1.end-0.25s"
            dur="0.75s"
            values="3;.2;3"></animate></circle
        ><circle cx="12" cy="12" r="3" fill="currentColor"
          ><animate
            attributeName="r"
            begin="svgSpinners3DotsScale0.end-0.6s"
            dur="0.75s"
            values="3;.2;3"></animate></circle
        ><circle cx="20" cy="12" r="3" fill="currentColor"
          ><animate
            id="svgSpinners3DotsScale1"
            attributeName="r"
            begin="svgSpinners3DotsScale0.end-0.45s"
            dur="0.75s"
            values="3;.2;3"></animate></circle
        ></svg
      >
    </div>
  </div>

  <div id="error-message" class="text-red-500 regular flex justify-center">
  </div>

  <div id="gallery-results" class="hidden"></div>
</div>
<div
  id="toast"
  class="toast fixed top-[45%] left-1/2 transform -translate-x-1/2 toast-glassbox regular p-2 rounded hidden z-50 select-none items-center text-nowrap"
>
</div>
<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const galleryResults = document.getElementById("gallery-results");
    const tagsContainer = document.getElementById("tags-container");
    const errorMessage = document.getElementById("error-message");
    const galleryFilters = document.getElementById("gallery-filters");
    const loadingPlaceholder = document.getElementById("loading-placeholder");
    const toast = document.getElementById("toast");
    let toastTimeout;

    const localizedNowViewing =
      document.getElementById("cw-container").dataset.localizedNowViewing;
    const localizedAllGalleries =
      document.getElementById("cw-container").dataset.localizedAllGalleries;
    const localizedLoadingError =
      document.getElementById("cw-container").dataset.localizedLoadingError;
    const localizedZoom =
      document.getElementById("cw-container").dataset.localizedZoom;
    const localizedDismiss =
      document.getElementById("cw-container").dataset.localizedDismiss;

    function showLoading() {
      loadingPlaceholder.classList.remove("hidden");
      galleryResults.classList.add("hidden");
      document.body.classList.add("overflow-hidden");
    }

    function hideLoading() {
      loadingPlaceholder.classList.add("hidden");
      document.body.classList.remove("overflow-hidden");
    }

    function displayError(message) {
      errorMessage.textContent = message;
    }

    function scrollToTop() {
      window.scrollTo({ top: 0, behavior: "smooth" });
    }

    function updateButtonClass(buttonId, isActive) {
      const button = document.getElementById(buttonId);
      if (isActive) {
        button.classList.remove("regular", "ultralight");
        button.classList.add("ultrabold", "text-[#1e7cff]");
      } else {
        button.classList.remove("ultrabold", "text-[#1e7cff]");
        button.classList.add("regular");
      }
    }

    function fetchAndDisplayAllTags() {
      fetchTags(null);
      tagsContainer.classList.remove("hidden");
      galleryFilters.classList.add("hidden");
      updateButtonClass("button-tags", true);
      updateButtonClass("button-galleries", false);
    }

    function toggleGalleryFilters() {
      galleryFilters.classList.toggle("hidden");
      tagsContainer.classList.add("hidden");
      galleryResults.classList.add("hidden");
      updateButtonClass(
        "button-galleries",
        !galleryFilters.classList.contains("hidden"),
      );
      updateButtonClass("button-tags", false);
    }

    async function fetchTags(ratingId = null) {
      try {
        showLoading();
        let url = "https://api.example.com/tags";
        if (ratingId !== null) {
          url += `?rating_id=${ratingId}`;
        }
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error("Failed to fetch tags");
        }
        const tags = await response.json();
        tags.sort((a, b) => a.rating_id - b.rating_id);

        tagsContainer.innerHTML = tags
          .map((tag) => {
            const colorClass = getColorClass(tag.rating_id);
            return `<button class="ultralight p-2 rounded-md ${colorClass} text-nowrap" data-tag-id="${tag.tag_id}" data-tag-name="${tag.tag_name}" aria-label="Tag: ${tag.tag_name}" title="${tag.tag_name}">
                  ${tag.tag_name}
                </button>`;
          })
          .join("");

        addTagEventListeners();
        tagsContainer.classList.remove("hidden");
      } catch (error) {
        displayError(`${localizedLoadingError}`);
      } finally {
        hideLoading();
      }
    }

    async function fetchGalleries(ratingId = null) {
      try {
        showLoading();
        let url = "https://api.example.com/gallery";
        if (ratingId !== null) {
          url += `?include_rating_id=${ratingId}`;
        }
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error("Failed to fetch galleries");
        }
        const galleries = await response.json();

        shuffleArray(galleries);

        galleryResults.innerHTML = galleries
          .map((gallery, galleryIndex) => {
            const artist = gallery.artworks[0]?.artist;
            const artistInfo = artist
              ? `
              <div class="flex items-center inline-block ml-1">
                <a href="${artist.website}" target="_blank" rel="noopener noreferrer" title="${artist.artist_name}: ${artist.website}" class="text-lg mobile-only:text-sm regular">
                  ${artist.artist_name}↗
                </a>
              </div>
              `
              : "";
            const artworkCount = gallery.artworks.length;
            return `
        <article class="mt-[2%]">
          <div class="flex justify-around glassbox rounded-lg p-2">
            <div class="flex items-center mobile-only:hidden">
              <div class="dark:invert inline-block">
                <svg xmlns="http://www.w3.org/2000/svg" class="dark:invert inline-block h-8 w-auto" viewBox="0 0 16 16">
                  <path fill="currentColor" d="M1.75 3a.75.75 0 0 0 0 1.5h12.5a.75.75 0 0 0 0-1.5zm0 3a.75.75 0 0 0 0 1.5h12.5a.75.75 0 0 0 0-1.5zM1 9.75A.75.75 0 0 1 1.75 9h12.5a.75.75 0 0 1 0 1.5H1.75A.75.75 0 0 1 1 9.75M1.75 12a.75.75 0 0 0 0 1.5h8.5a.75.75 0 0 0 0-1.5z"/>
                </svg>
              </div>
              <span class="text-lg mobile-only:text-sm inline-block regular ml-1">
                ${gallery.gallery_name}
              </span>
            </div>
            <div class="flex items-center">
              <div class="dark:invert inline-block">
                <svg xmlns="http://www.w3.org/2000/svg" class="dark:invert inline-block h-8 w-auto" viewBox="0 0 20 20">
                  <path fill="currentColor" d="M4 15v-3H2V2h12v3h2v3h2v10H6v-3zm7-12c-1.1 0-2 .9-2 2h4a2 2 0 0 0-2-2m-7 8V6H3v5zm7-3h4a2 2 0 1 0-4 0m-5 6V9H5v5zm9-1a2 2 0 1 0 .001-3.999A2 2 0 0 0 15 13m2 4v-2c-5 0-5-3-10-3v5z"/>
                </svg>
              </div>
              <span class="regular inline-block mobile-only:text-sm ml-1">
                ${artworkCount}
              </span>
            </div>
            <div class="flex items-center">
              <div class="dark:invert inline-block">
                <svg xmlns="http://www.w3.org/2000/svg" class="dark:invert inline-block h-7 w-auto" viewBox="0 0 16 16">
                  <path fill="currentColor" d="M11.134 1.535c.7-.509 1.416-.942 2.076-1.155c.649-.21 1.463-.267 2.069.34c.603.601.568 1.411.368 2.07c-.202.668-.624 1.39-1.125 2.096c-1.011 1.424-2.496 2.987-3.775 4.249c-1.098 1.084-2.132 1.839-3.04 2.3a3.74 3.74 0 0 1-1.055 3.217c-.431.431-1.065.691-1.657.861c-.614.177-1.294.287-1.914.357A21 21 0 0 1 .797 16H.743l.007-.75H.749L.742 16a.75.75 0 0 1-.743-.742l.743-.008l-.742.007v-.054a21 21 0 0 1 .13-2.284q.101-.972.358-1.914c.17-.591.43-1.226.86-1.657a3.75 3.75 0 0 1 3.227-1.054c.466-.893 1.225-1.907 2.314-2.982c1.271-1.255 2.833-2.75 4.245-3.777M1.62 13.089q-.077.696-.104 1.395q.7-.027 1.396-.104a10.5 10.5 0 0 0 1.668-.309c.526-.151.856-.325 1.011-.48a2.25 2.25 0 1 0-3.182-3.182c-.155.155-.329.485-.48 1.01a10.5 10.5 0 0 0-.309 1.67m10.396-10.34c-1.224.89-2.605 2.189-3.822 3.384l1.718 1.718c1.21-1.205 2.51-2.597 3.387-3.833c.47-.662.78-1.227.912-1.662c.134-.444.032-.551.009-.575h-.001V1.78c-.014-.014-.113-.113-.548.027c-.432.14-.995.462-1.655.942m-4.832 7.266a10 10 0 0 0 1.63-1.142L7.155 7.216a9.7 9.7 0 0 0-1.161 1.607c.482.302.889.71 1.19 1.192"/>
                </svg>
              </div>
              ${artistInfo}
            </div>
          </div>
          <div class="flex overflow-x-auto space-x-4 mt-[1%] mb-[1%]">
            ${gallery.artworks
              .map((artwork, artworkIndex) => {
                const uniqueId = `gallery-${galleryIndex}-artwork-${artworkIndex}`;
                const tags = artwork.tags
                  .map((tag) => {
                    const colorClass = getColorClass(tag.rating_id);
                    return `<button class="p-2 ultralight rounded ${colorClass} text-base mobile-only:text-xs not-mobile:text-nowrap" data-tag-id="${tag.tag_id}" data-tag-name="${tag.tag_name}" aria-label="Tag: ${tag.tag_name}" title="${tag.tag_name}">
                          ${tag.tag_name}
                        </button>`;
                  })
                  .join(" ");
                return `
                <div class="mt-[1%] mb-[1%]">
                  ${renderMedia(artwork.artwork_url, uniqueId)}
                  <div class="mt-2 flex space-x-2">${tags}</div>
                </div>
              `;
              })
              .join("")}
          </div>
        </article>
      `;
          })
          .join("");
        addArtworkTagEventListeners();
        galleryResults.classList.remove("hidden");
      } catch (error) {
        displayError(
          "Could not load galleries for the selected rating. Please try again later.",
        );
      } finally {
        hideLoading();
      }
    }

    async function fetchGalleriesByTag(tagId) {
      try {
        showLoading();
        const response = await fetch(
          `https://api.example.com/gallery?include_tag_id=${tagId}`,
        );
        if (!response.ok) {
          throw new Error("Failed to fetch galleries");
        }
        const galleries = await response.json();

        shuffleArray(galleries);

        galleryResults.innerHTML = galleries
          .map((gallery, galleryIndex) => {
            const artist = gallery.artworks[0]?.artist;
            const artistInfo = artist
              ? `
              <div class="flex items-center inline-block ml-1">
                <a href="${artist.website}" target="_blank" rel="noopener noreferrer" title="${artist.artist_name}: ${artist.website}" class="text-lg mobile-only:text-sm regular">
                  ${artist.artist_name}↗
                </a>
              </div>
              `
              : "";
            const filteredArtworks = gallery.artworks.filter((artwork) =>
              artwork.tags.some(
                (tag) => tag.tag_id.toString() === tagId.toString(),
              ),
            );
            const artworkCount = filteredArtworks.length;
            return `
        <article class="mt-[2%]">
          <div class="flex justify-around glassbox rounded-lg p-2">
            <div class="flex items-center mobile-only:hidden">
              <div class="dark:invert inline-block">
                <svg xmlns="http://www.w3.org/2000/svg" class="dark:invert inline-block h-8 w-auto" viewBox="0 0 16 16">
                  <path fill="currentColor" d="M1.75 3a.75.75 0 0 0 0 1.5h12.5a.75.75 0 0 0 0-1.5zm0 3a.75.75 0 0 0 0 1.5h12.5a.75.75 0 0 0 0-1.5zM1 9.75A.75.75 0 0 1 1.75 9h12.5a.75.75 0 0 1 0 1.5H1.75A.75.75 0 0 1 1 9.75M1.75 12a.75.75 0 0 0 0 1.5h8.5a.75.75 0 0 0 0-1.5z"/>
                </svg>
              </div>
              <span class="text-lg mobile-only:text-sm inline-block regular ml-1">
                ${gallery.gallery_name}
              </span>
            </div>
            <div class="flex items-center">
              <div class="dark:invert inline-block">
                <svg xmlns="http://www.w3.org/2000/svg" class="dark:invert inline-block h-8 w-auto" viewBox="0 0 20 20">
                  <path fill="currentColor" d="M4 15v-3H2V2h12v3h2v3h2v10H6v-3zm7-12c-1.1 0-2 .9-2 2h4a2 2 0 0 0-2-2m-7 8V6H3v5zm7-3h4a2 2 0 1 0-4 0m-5 6V9H5v5zm9-1a2 2 0 1 0 .001-3.999A2 2 0 0 0 15 13m2 4v-2c-5 0-5-3-10-3v5z"/>
                </svg>
              </div>
              <span class="regular inline-block mobile-only:text-sm ml-1">
                ${artworkCount}
              </span>
            </div>
            <div class="flex items-center">
              <div class="dark:invert inline-block">
                <svg xmlns="http://www.w3.org/2000/svg" class="dark:invert inline-block h-7 w-auto" viewBox="0 0 16 16">
                  <path fill="currentColor" d="M11.134 1.535c.7-.509 1.416-.942 2.076-1.155c.649-.21 1.463-.267 2.069.34c.603.601.568 1.411.368 2.07c-.202.668-.624 1.39-1.125 2.096c-1.011 1.424-2.496 2.987-3.775 4.249c-1.098 1.084-2.132 1.839-3.04 2.3a3.74 3.74 0 0 1-1.055 3.217c-.431.431-1.065.691-1.657.861c-.614.177-1.294.287-1.914.357A21 21 0 0 1 .797 16H.743l.007-.75H.749L.742 16a.75.75 0 0 1-.743-.742l.743-.008l-.742.007v-.054a21 21 0 0 1 .13-2.284q.101-.972.358-1.914c.17-.591.43-1.226.86-1.657a3.75 3.75 0 0 1 3.227-1.054c.466-.893 1.225-1.907 2.314-2.982c1.271-1.255 2.833-2.75 4.245-3.777M1.62 13.089q-.077.696-.104 1.395q.7-.027 1.396-.104a10.5 10.5 0 0 0 1.668-.309c.526-.151.856-.325 1.011-.48a2.25 2.25 0 1 0-3.182-3.182c-.155.155-.329.485-.48 1.01a10.5 10.5 0 0 0-.309 1.67m10.396-10.34c-1.224.89-2.605 2.189-3.822 3.384l1.718 1.718c1.21-1.205 2.51-2.597 3.387-3.833c.47-.662.78-1.227.912-1.662c.134-.444.032-.551.009-.575h-.001V1.78c-.014-.014-.113-.113-.548.027c-.432.14-.995.462-1.655.942m-4.832 7.266a10 10 0 0 0 1.63-1.142L7.155 7.216a9.7 9.7 0 0 0-1.161 1.607c.482.302.889.71 1.19 1.192"/>
                </svg>
              </div>
              ${artistInfo}
            </div>
          </div>
          <div class="flex overflow-x-auto space-x-4 mt-[1%] mb-[1%]">
            ${filteredArtworks
              .map((artwork, artworkIndex) => {
                const uniqueId = `gallery-${galleryIndex}-artwork-${artworkIndex}`;
                const tags = artwork.tags
                  .map((tag) => {
                    const colorClass = getColorClass(tag.rating_id);
                    return `<button class="p-2 ultralight rounded ${colorClass} text-base mobile-only:text-xs not-mobile:text-nowrap" data-tag-id="${tag.tag_id}" data-tag-name="${tag.tag_name}" aria-label="Tag: ${tag.tag_name}" title="${tag.tag_name}">
                          ${tag.tag_name}
                        </button>`;
                  })
                  .join(" ");
                return `
                <div class="mt-[1%] mb-[1%]">
                  ${renderMedia(artwork.artwork_url, uniqueId)}
                    <div class="mt-2 flex space-x-2 inline-block">
                      ${tags}
                    </div>
                </div>
              `;
              })
              .join("")}
          </div>
        </article>
      `;
          })
          .join("");
        addArtworkTagEventListeners();
        galleryResults.classList.remove("hidden");
      } catch (error) {
        displayError(
          "Could not load galleries for the selected tag. Please try again later.",
        );
      } finally {
        hideLoading();
      }
    }

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
    }

    function getColorClass(ratingId) {
      switch (ratingId) {
        case 1:
          return "bg-green-500 hover:bg-green-600 text-white";
        case 2:
          return "bg-red-500 hover:bg-red-600 text-white";
        case 3:
          return "bg-purple-500 hover:bg-purple-600 text-white";
        default:
          return "bg-gray-500 hover:bg-gray-600 text-white";
      }
    }

    function renderMedia(url, imageId) {
      const extension = url.split(".").pop().toLowerCase();
      const videoExtensions = ["mp4", "mkv"];

      if (videoExtensions.includes(extension)) {
        return `<video controls class="flex-none h-[85vh] max-w-none rounded mb-2 object-contain">
                <source src="${url}" type="video/${extension}">
                Your browser does not support the video tag.
              </video>`;
      } else {
        return `<div class="relative">
                <img src="${url}" alt="Artwork" class="flex-none h-[80vh] max-w-none rounded-lg mb-2 object-contain" />
                <div
                  id="${imageId}-modal-zoom"
                  class="glassbox p-2 rounded-sm z-10 absolute top-2 right-2 hover:text-[#1e7cff] button-glassbox cursor-pointer "
                  onclick="document.getElementById('${imageId}-modal').classList.toggle('hidden')"
                  title="${localizedZoom}"
                >
                  <div class="dark:invert">
                    <svg xmlns="http://www.w3.org/2000/svg" class="group-hover:block h-10 mobile-only:h-5 w-auto dark:invert" viewBox="0 0 24 24">
                      <path fill="currentColor" d="M3 21v-6h2v2.6l3.1-3.1l1.4 1.4L6.4 19H9v2zM15.9 9.5l-1.4-1.4L17.6 5H15V3h6v6h-2V6.4z"/>
                    </svg>
                  </div>
                </div>
              </div>
              <div
                id="${imageId}-modal"
                class="hidden fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50"
                onclick="this.classList.add('hidden')"
              >
                <img
                  src="${url}"
                  class="rounded-md cursor-pointer z-40"
                  alt="Zoomed Image"
                  style="max-height: 90vh; width: auto;"
                  title="${localizedDismiss}"
                />
              </div>`;
      }
    }

    function addTagEventListeners() {
      const tagButtons = tagsContainer.querySelectorAll("button");
      tagButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const tagId = button.getAttribute("data-tag-id");
          const tagName = button.getAttribute("data-tag-name");
          showLoading();
          fetchGalleriesByTag(tagId);
          highlightActiveTag(tagId);
          showToast(localizedNowViewing, tagName);
          galleryFilters.classList.add("hidden");
        });
      });
    }

    function addArtworkTagEventListeners() {
      const artworkTagButtons = galleryResults.querySelectorAll("button");
      artworkTagButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const tagId = button.getAttribute("data-tag-id");
          const tagName = button.getAttribute("data-tag-name");
          showLoading();
          fetchGalleriesByTag(tagId);
          fetchTags(getRatingIdFromTagId(tagId));
          highlightActiveTag(tagId);
          showToast(localizedNowViewing, tagName);
          scrollToTop();

          galleryFilters.classList.add("hidden");

          updateButtonClass("button-tags", true);
          updateButtonClass("button-galleries", false);
        });
      });
    }

    function getRatingIdFromTagId(tagId) {
      const tagToRatingMap = {
        tag1: 1,
        tag2: 2,
        tag3: 3,
      };
      return tagToRatingMap[tagId] || null;
    }

    function highlightActiveTag(tagId) {
      const tagButtons = tagsContainer.querySelectorAll("button");
      tagButtons.forEach((button) => {
        if (button.getAttribute("data-tag-id") === tagId) {
          button.classList.remove("regular", "ultralight");
          button.classList.add("ultrabold", "text-[#1e7cff]");
        } else {
          button.classList.remove("ultrabold", "text-[#1e7cff]");
          button.classList.add("ultralight");
        }
      });
    }

    function resetGalleryRatingButtons() {
      const galleryRatingButtons = [
        "button-gallery-rating-1",
        "button-gallery-rating-2",
        "button-gallery-rating-3",
        "button-gallery-all",
      ];
      galleryRatingButtons.forEach((buttonId) => {
        updateButtonClass(buttonId, false);
      });
    }

    document
      .getElementById("button-gallery-rating-1")
      .addEventListener("click", () => {
        resetGalleryRatingButtons();
        fetchGalleries(1);
        tagsContainer.classList.add("hidden");
        updateButtonClass("button-gallery-rating-1", true);
        showToast(localizedNowViewing, "Rating 1");
      });

    document
      .getElementById("button-gallery-rating-2")
      .addEventListener("click", () => {
        resetGalleryRatingButtons();
        fetchGalleries(2);
        tagsContainer.classList.add("hidden");
        updateButtonClass("button-gallery-rating-2", true);
        showToast(localizedNowViewing, "Rating 2");
      });

    document
      .getElementById("button-gallery-rating-3")
      .addEventListener("click", () => {
        resetGalleryRatingButtons();
        fetchGalleries(3);
        tagsContainer.classList.add("hidden");
        updateButtonClass("button-gallery-rating-3", true);
        showToast(localizedNowViewing, "Rating 3");
      });

    function showToast(localizedNowViewing, tagName) {
      if (toastTimeout) {
        clearTimeout(toastTimeout);
      }
      toast.innerHTML =
        '<svg xmlns="http://www.w3.org/2000/svg" class="h-8 mobile-only:h-5 w-auto inline-block" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="3"/><path d="M20.188 10.934c.388.472.582.707.582 1.066s-.194.594-.582 1.066C18.768 14.79 15.636 18 12 18s-6.768-3.21-8.188-4.934c-.388-.472-.582-.707-.582-1.066s.194-.594.582-1.066C5.232 9.21 8.364 6 12 6s6.768 3.21 8.188 4.934Z"/></g></svg>';

      const textNode = document.createTextNode(`${localizedNowViewing}: `);
      const strongElement = document.createElement("strong");
      strongElement.textContent = tagName;

      toast.appendChild(textNode);
      toast.appendChild(strongElement);

      toast.classList.remove("hidden");
      toastTimeout = setTimeout(() => {
        toast.classList.add("hidden");
      }, 3000);
    }

    document
      .getElementById("button-tags")
      .addEventListener("click", fetchAndDisplayAllTags);

    document
      .getElementById("button-galleries")
      .addEventListener("click", toggleGalleryFilters);

    document
      .getElementById("button-gallery-rating-1")
      .addEventListener("click", () => {
        fetchGalleries(1);
        tagsContainer.classList.add("hidden");
        updateButtonClass("button-gallery-rating-1", true);
        showToast(localizedNowViewing, "Rating 1");
      });

    document
      .getElementById("button-gallery-rating-2")
      .addEventListener("click", () => {
        fetchGalleries(2);
        tagsContainer.classList.add("hidden");
        updateButtonClass("button-gallery-rating-2", true);
        showToast(localizedNowViewing, "Rating 2");
      });

    document
      .getElementById("button-gallery-rating-3")
      .addEventListener("click", () => {
        fetchGalleries(3);
        tagsContainer.classList.add("hidden");
        updateButtonClass("button-gallery-rating-3", true);
        showToast(localizedNowViewing, "Rating 3");
      });

    document
      .getElementById("button-gallery-all")
      .addEventListener("click", () => {
        resetGalleryRatingButtons();
        fetchGalleries(null);
        tagsContainer.classList.add("hidden");
        updateButtonClass("button-gallery-all", true);
        showToast(localizedNowViewing, localizedAllGalleries);
      });
  });
</script>